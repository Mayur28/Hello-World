Where does the perceptual loss fit in
I see where we are calculating the attention map but I dont see where are we using it.

Add print statements to the __getitems__ functions (especially the one that is used to create a dictionary containing the dataset). This is because the dictionary is only created in the __getitem__ function which does not seem to be explicitly called.

Look into the main functions (the arch. of the networks as well as how they forward and back propagate)

Filter out everything properly today!

Fix get_current_visuals function to save space!

In the long term, I may need to compile better datasets. I dont think training for the 2 roles simulataneously is a viable solution

Try to display the many aspects within the generator when doing a forward pass (what do the many resized attention maps or the latent result look like before any further processing)

I think I get it out: the "real image" is our reference input (normal light) image which and is what is used to illustrate what the model should achieve.

BEFORE EXECUTING AGAIN ON COLAB, I SHOULD FILTER OUT THE DATASETS.
FIND A BETTER STRATEGY TO TRAIN FOR THE 2 TASKS

Confirm the switching of labels in the backward_G function


Find a way to display the images so that I can see what is input_A, input_B and input_img
Understand how the filters, kernels and strides are configured to achieve different things

Check if I should also do some form of data augmentation (removed stuff in get_transform and unaligned_dataset)

Train the model with all the diagnostic printing( sizes of the downsampled attention maps) to understand the model better.

There are 2 pad_tensor functions, remove accordingly!

It appears that the output is formed by multiplying the latent image with the low-light image.


FOR TOMORROW:
START LOOKING AT THE SHADOW REMOVAL METHODS AND DECIPHER WHAT ARE THE ASPECTS THAT ARE REQUIRED TO WORK.
THOROUGHLY! ( WHOLE DAY!) --> UNDERSTANDING THEORETICALLY AND DIGGING IN THE IMPLEMENTATIONS!

MONDAY:
READ ENLIGHTEN+ MAJOR SHADOW PAPER
I NEED TO GO THROUGHT THE OPTIMIZE PARAMETERS FUNCTION ( AND THE SUB-FUNCTION) EXTREMELY THOROUGHLY!
FILTER OUT THE NOTES AND GET MY FINAL VERSION OF THE CODE READY (WITH ALL THE NECESSARY AMENDMENTS PERFORMED!!!)
Check what is going on in backward_G as to how the  loss_G_A is computed (why are they switched?)

My Experimentations:

I MUST BLEND WITH THE PyTorch DCGAN EXAMPLE AND CHECK THE OVERLAPS AND DISPARITIES

Read sebaa for handling the data properly
Remove the redundant down sample in the generator
To upsample in the generator, try the transpose convolutional layer
Instead of setting the resize_or_crop to the default being crop, try resize
Check what happens if I remove the resize in the set_input function (single model.py)
To make life fair, I should try and form my own datasets that conduces what I'm doing
Check what is the purpose of the latent result
Its okay if our training results seem small because for their prediction process, the original size is maintained.
Try to filter out line 265 in single_model.py. It seems to me that many aspects are redundant.

I dont see where is the vgg forward function called? In the Perceptual loss class, I see that we are using the vgg network but I dont see where we explicitly forward propagate.

Try to find out why did they train with the images flipped?

Go through opt and filter out all the useless parameters
Try another form of downsampling in the generator( to remove the maxpooling)

Since I'm assuming that the model is being trained for even darkness, take matters into my own hands and try with my own images to verify!

TRY TO PUT THE BATCH NORMALIZATION BEFORE THE LReLu(MLM says before but many forums found empirically that BN after LReLu performs better)

Get drive pictures to work without visdom!

See what happens if we dont decay the learning rate after 100 epochs